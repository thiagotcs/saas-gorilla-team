generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens        Token[]
  accounts      Account[]
  invites       Invite[]
  memberships    Member[]
  academiesOwned Academy[]
  classesOwned   Class[]
  enrollments    Enrollment[] 

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String   @id @default(uuid())
  type      TokenType
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GOOGLE
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  academy   Academy @relation(fields: [academyId], references: [id])
  academyId String  @map("academy_id")

  @@unique([email, academyId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  academy   Academy @relation(fields: [academyId], references: [id])
  academyId String  @map("academy_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([academyId, userId])
  @@index([userId, academyId])
  @@map("members")
}

model Academy {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  @unique
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  owner  User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites Invite[]
  members Member[]
  classes Class[]

  @@index([ownerId])
  @@map("academies")
}

model Class {
  id          String   @id @default(uuid())
  name        String
  description String
  slug        String   @unique
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  academy   Academy @relation(fields: [academyId], references: [id])
  academyId String  @map("academy_id")

  owner  User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  enrollments Enrollment[]

  @@index([ownerId])
  @@map("classes")
}

model Enrollment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  class   Class  @relation(fields: [classId], references: [id])
  classId String @map("class_id")

  @@unique([userId, classId])
  @@map("enrollments")
}
